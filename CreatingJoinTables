/* Creating Join Tables

Learning Goals
    Learn to distinguish between the different types of relationships between data in your database: the "belongs to"/"has many" and "many-to-many" relationships.
    Understand how to build each type of relationship via either the use of foreign keys or the use of a join table.
    Understand what a join table is and how it functions.
    Build a join table and query data from it. */

-- Data Relations Many-to-Many Relationship 

/* In relational databases, we can categorize the type of relationship that exists between 
    the data that we are storing. There are two basic types of relationships that we need to 
    know right now. The "has many"/"belongs to" relationship and the "many-to-many" relationship */

-- The "has many"/"belongs to" Relationship
/* Imagine a db that keeps track of pets and their Owners. 
    The Pet's Database has an Owners table and a Cats table 
    The Cats table has a column, owner_id, that contains a foreign key corresponding to the id column of the Owners table
    
    In This way, an individual cat is associated to the person that owns it 
    Any number of cats can have the same owner. 
    Any numer of cats can have the same owner_id */

-- Say we have the following owners:
id               name      
---------------  ----------
1                mugumogu  
2                Sophie    
3                Penny    

-- And the following Cats 
id               name        age         owner_id    breed        
---------------  ----------  ----------  ----------  -------------
1                Maru        3           1           Scottish Fold
2                Hana        1           1           Tabby        
3                Nona        4           2           Tortoiseshell
4                LilBub      2                       perma- kitten  

-- Maru and Hana have the same value of owner_id column a value of 1 
-- They both belong to mugumogu 

-- Run a query to select all of the cats whos owner_id is 1 
sqlite> SELECT * FROM cats WHERE owner_id = 1; 

-- Returns 
id               name        age         owner_id    breed        
---------------  ----------  ----------  ----------  -------------
1                Maru        3           1           Scottish Fold
2                Hana        1           1           Tabby         

-- Our first owner, mugumogu, has many cats 
-- Both Hana and Maru belong to mugumogu 

-- Enacting The Relationship Through Foreign Keys 
/*  The "has many"/"belongs to" relationship is created through the use of foreign keys
    The Cats table has an owner_id column which is the foreign key column. It contains information that corresponds to the id column of the Owners table.
    
    The table that contains the foreign key column is the table that contains the entities that "belong to" another 
    The table that is reference via the foreign key is the parent or owner entity that "has many" of something else
    
    What happens if the cat realizes it can live the good life by hanging out with the family across the street?
    Such a cat would have more than one owner 
    Our "has many"/"belongs to" relationship is no longer adequate*/

    /* How would we account for a cat with many owners?
        It would require us to change our schema by continuing to add columns every time 
        a cat gains a new owner 
        This means our Cats table could grow to contain a possibly infinite number of columns  */
-- To avoid undesirable horizontal table growth with the use of join table 

-- Join Tables and the "many-to-many" Relationship 

/* A join table contains common fields from two or more other tables 
    In this way, it creates a many-to-many relationship between data */

-- Code Along I: Building a Join Table 
/* Create a many-to-many association between cats and owners 
    Such that a cat can have many owners and an owner can have many cats 
    Our join tbale will have two columns 
    one for each of the tables we want to relate 
    We will have a cat_id column and an owner_id column  */

-- Create a Pet's DB 
sqlite3 pets_database_join_example.db 

-- Create the following two tables:
-- Cats Table:
CREATE TABLE cats (
id INTEGER PRIMARY KEY,
name TEXT,
age INTEGER,
breed TEXT
); 

-- Owners Table:
CREATE TABLE owners (id INTEGER PRIMARY KEY, name TEXT); 

-- Insert the data 
INSERT INTO owners (name) VALUES ("mugumogu");
INSERT INTO owners (name) VALUES ("Sophie");
INSERT INTO owners (name) VALUES ("Penny");
INSERT INTO cats (name, age, breed) VALUES ("Maru", 3, "Scottish Fold");
INSERT INTO cats (name, age, breed) VALUES ("Hana", 1, "Tabby");
INSERT INTO cats (name, age, breed) VALUES ("Nona", 4, "Tortoiseshell");
INSERT INTO cats (name, age, breed) VALUES ("Lil' Bub", 2, "perma-kitten"); 

-- The cats_owners Join Table 
-- Creating the Table 
/*  We're ready to create our join table 
    Since our table is creating a many-to-many relationship bewteen cats and owners, we'll call our table 
    cats_owners 
    It is conventional to name your join table using the names of the tables you are creating the many-to-many 
    relationship bewteen  */

--  Create our join table in the terminal 
CREATE TABLE cats_owners (
cat_id INTEGER,
owner_id INTEGER
); 

-- Conferm that worked by checking the schema 
.schema 

-- You'll see 
CREATE TABLE cats (
id INTEGER PRIMARY KEY, 
name TEXT, 
age INTEGER,
breed TEXT);

CREATE TABLE owners (id INTEGER PRIMARY KEY, name TEXT);

CREATE TABLE cats_owners (
cat_id INTEGER,
owner_id INTEGER
);

-- Inserting Data into the Join table 
/* Each row in our join table will represent one cat/owner relationship 
    For example: Nona the cat has acquired a second owner, Penny 
    Now we want to represent that Nona has two owners, Sophie and Penny  */

-- First Insert the Nona/Sophie relationship into ur join table
-- Nona the cat has an id of 3 and Sophie owner id is 2 
INSERT INTO cats_owners (cat_id, owner_id) VALUES (3, 2);

-- Check to contents of cats_owners table 
SELECT * FROM cats_owners; 

-- Returns 
cat_id           owner_id  
---------------  ----------
3                2   

-- Insert the Nona/Penny relationship into our join table 
INSERT INTO cats_owners (cat_id, owner_id) VALUES (3, 3); 

-- We'll confirm this insertion with another SELECT statement:
SELECT * FROM cats_owners; 

-- Returns 
cat_id           owner_id  
---------------  ----------
3                2         
3                3     

-- Now our table reflexts that Nona, the cat with an id of 3 had many owners 

-- Lets insert a row that will give a particular owner many cats 
-- Sophie now co-owns Maru the cat 

-- Insert the appropriate row into our join table 
-- Sophie id is 2 and Maru id is 1 
INSERT INTO cats_owners (cat_id, owner_id) VALUES (1, 2); 

-- Let's run a SELECT statement to confirm that our insertion worked:
SELECT * FROM cats_owners; 

-- This should return:
cat_id           owner_id  
---------------  ----------
3                2         
3                3         
1                2     

-- Nona(id 3) has many Owners Sophie (id 2) has many cats 
-- Our many-to-many relationship is up and running 

-- TAke advantage of this association by running some queries that untilize our join table 
-- to return information about these complex relationships 
---------------------------------------------------------------------------------------------

-- Code Along II: Querying the Join Table 
-- Basic Queries 
-- SELECT form our join table all the owner who are associated to cat number 3 
SELECT cats_owners.owner_id 
FROM cats_owners 
WHERE cat_id = 3;

-- This should return:
owner_id       
---------------
2              
3      

-- SELECT all of the cats who are associated with owner number 2 
SELECT cats_owners.cat_id 
FROM cats_owners 
WHERE owner_id = 2; 

-- Returns 
cat_id         
---------------
3              
1    

-- There are great, but lets write queries that return further information such as their names 

-- Advanced Queries 
-- Execute 
SELECT owners.name 
FROM owners 
INNER JOIN cats_owners 
ON owners.id = cats_owners.owner_id WHERE cats_owners.cat_id = 3; 

-- Returns 
name           
---------------
Sophie         
Penny   

-- Break down 
SELECT owners.name -- We declare the column data that we want to actually have returned to us 
FROM owners -- We specify the table whose column we are querying 
INNER JOIN cats_owners ON owners.id = cats_owners.owner_id 
    /*   We are joining cats_owner table on the owners table 
         We are talling our query to look for owners whos id column matches up to the 
         owner_id column in the cats_owners table*/
WHERE cats_owners.cat_id = 3;
    /* We are telling our query to look at the cats_owners table rows only, cross 
    reference the owner_id column value and the id column in the owners table  */

-- Boiler-plate query that utilzes JOIN statement to query a join table 
SELECT column(s)
FROM table_one
INNER JOIN table_two
ON table_one.column_name = table_two.column_name
WHERE table_two.column_name = condition; 

-- Giving this one more try, lets query the join table for names of all the cats owned by Sophie 
SELECT cats.name
FROM cats
INNER JOIN cats_owners
ON cats.id = cats_owners.cat_id
WHERE cats_owners.owner_id = 2; 

-- Returns 
name           
---------------
Nona           
Maru  